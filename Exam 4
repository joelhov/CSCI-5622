---
title: "Untitled"
author: "Joel Hoversten"
date: "2024-10-15"
output: html_document
---

```{r}
library(arules)
library(arulesViz)
```


```{r}
Foods <- read.transactions("C:/Users/joelh/OneDrive/Desktop/CSCI5622/ExamData2.csv",
                           rm.duplicates = FALSE,
                           sep = ",",
                           cols = NULL)

inspect(Foods)

```

```{r}
rules = arules::apriori(Foods, parameter = list(support=.2, 
                                          confidence=.2, minlen=2))
inspect(rules)


SortedRules <- sort(rules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:28])
(summary(SortedRules))

SortedRules1 <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRules1[1:28])
(summary(SortedRules1))
```



```{r}

SortedRules <- sort(rules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:28])
(summary(SortedRules))

```


```{r}

SortedRules1 <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRules1[1:28])
(summary(SortedRules1))
```


```{r}
SortedRules <- sort(rules, by="confidence", decreasing=FALSE)
inspect(SortedRules[1:28])
(summary(SortedRules))
```



```{r}
SortedRules1 <- sort(rules, by="lift", decreasing=FALSE)
inspect(SortedRules1[1:28])
(summary(SortedRules1))
```







```{r}
SortedRules <- sort(rules, by="confidence", decreasing=FALSE)
inspect(SortedRules[1:28])
(summary(SortedRules))
```


```{r}
Foods <- read.transactions("C:/Users/joelh/OneDrive/Desktop/CSCI5622/ExamData2.csv",
                             rm.duplicates = FALSE, 
                             format = "basket",  ##if you use "single" also use cols=c(1,2)
                             sep=",",  ## csv file
                             cols=NULL) ## The dataset has no row numbers
inspect(Foods)

##### Use apriori to get the RULES
Frules = arules::apriori(Foods, parameter = list(support=.0001, 
                                          confidence=.5, minlen=2))
inspect(Frules)

## Plot of which items are most frequent
itemFrequencyPlot(Foods, topN=20, type="absolute")

## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(Frules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:28])
(summary(SortedRules))

## Selecting or targeting specific rules  RHS
ChocRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="Electronics"),
                     control=list(verbose=FALSE))
ChocRules <- sort(ChocRules, decreasing=TRUE, by="confidence")
inspect(ChocRules[1:15])

## Selecting rules with LHS specified
CarrotRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="rhs", lhs="Fashion"),
                     control=list(verbose=FALSE))
CarrotRules <- sort(CarrotRules, decreasing=TRUE, by="support")
inspect(CarrotRules[1:5])

## Visualize
## tcltk

subrules <- head(sort(SortedRules, by="lift"),10)
plot(subrules)

#plot(subrules, method="graph", engine="interactive")
plot(subrules, method="graph", engine="htmlwidget")
```

```{r}
library(arules)
```


```{r}
Foods <- read.transactions("C:/Users/joelh/OneDrive/Desktop/CSCI5622/ExamData2.csv",
                           rm.duplicates = FALSE,
                           sep = ",",
                           cols = NULL)

inspect(Foods)

```

```{r}
rules = arules::apriori(Foods, parameter = list(support=.0001, 
                                          confidence=.0001, minlen=2))
inspect(rules)
```


```{r}
SortedRules <- sort(rules, by="support", decreasing=TRUE)
inspect(SortedRules[1:10])
```



```{r}
SortedRules1 <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRules1[1:10])
```

```{r}
SortedRules1 <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRules1[24:26])
```

```{r}
SortedRules1 <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRules1[1:2])
```

```{r}
ChocRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="rhs", lhs="Sports"),
                     control=list(verbose=FALSE))
ChocRules <- sort(ChocRules, decreasing=TRUE, by="confidence")
inspect(ChocRules[1:3])
```

```{r}
ChocRules1 <- apriori(data=Foods,parameter = list(supp=.001, conf=.13, minlen=2),
                     appearance = list(default="lhs", rhs="Electronics"),
                     control=list(verbose=FALSE))
ChocRules1 <- sort(ChocRules1, decreasing=TRUE, by="confidence")
inspect(ChocRules1[1:13])
```
```{r}
ChocRules1 <- apriori(data=Foods,parameter = list(supp=.001, conf=.13, minlen=2),
                     appearance = list(default="lhs", rhs="Fashion"),
                     control=list(verbose=FALSE))
ChocRules1 <- sort(ChocRules1, decreasing=TRUE, by="confidence")
inspect(ChocRules1[1:13])
```

```{r}
ChocRules1 <- apriori(data=Foods,parameter = list(supp=.001, conf=.13, minlen=2),
                     appearance = list(default="lhs", rhs="Sports"),
                     control=list(verbose=FALSE))
ChocRules1 <- sort(ChocRules1, decreasing=TRUE, by="confidence")
inspect(ChocRules1[1:13])
```

```{r}
library(naivebayes)
library(psych)
library(dplyr)
library(ggplot2)
```

```{r}
## data
data(iris)
str(iris)
# Species is the label
table(iris$Species)
(head(iris))
(summary(iris))

MyIrisDF <- iris
```

```{r}
pairs.panels(iris)

iris %>%
  ggplot(aes(x=Species, y=Sepal.Width, fill=Species)) +
  geom_boxplot() +
  ggtitle("Box plot")

iris %>%
  ggplot(aes(x=Sepal.Width, fill=Species)) +
  geom_density(alpha=.6, color="black") +
  ggtitle("Density plot")

plot(iris)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species)

```
```{r}
## Create Train and Test Set
(n <- round(nrow(MyIrisDF)/5))
(s <- sample(1:nrow(MyIrisDF), n))

## The test set is the sample
IrisTest<- MyIrisDF[s,]
## The trainng set is the not sample
IrisTrain <- MyIrisDF[-s,]
## Have a look...
(head(IrisTest,n=5))
(head(IrisTrain,n=5))

```


```{r}
NBModel <- naive_bayes(IrisTrain$Species ~., data=IrisTrain)
print(NBModel)

plot(NBModel)

## predict
NB_p <- predict(NBModel, IrisTest, type="prob")
(head(round(NB_p)))

## classify/predict
NB_p2 <- predict(NBModel, IrisTest, type="class")
(Pred_TABLE <-table(NB_p2, IrisTest$Species))
## accuracy
(sum(diag(Pred_TABLE)/sum(Pred_TABLE)))

```


```{r}
df<-read.csv('C:/Users/joelh/OneDrive/Desktop/CSCI5622/ExamData.csv')

```
```{r}
MyIrisDF <- df
```

```{r}
pairs.panels(MyIrisDF)


MyIrisDF %>%
  ggplot(aes(x=Income, fill=CC)) +
  geom_density(alpha=.6, color="black") +
  ggtitle("Density plot")

MyIrisDF %>%
  ggplot(aes(x=Interests, fill=CC)) +
  geom_density(alpha=.6, color="black") +
  ggtitle("Density plot")

MyIrisDF %>%
  ggplot(aes(x=Prime, fill=CC)) +
  geom_density(alpha=.6, color="black") +
  ggtitle("Density plot")

plot(MyIrisDF)
plot(MyIrisDF$Interests,MyIrisDF$Income,col=MyIrisDF$CC)

```
```{r}
## Create Train and Test Set
(n <- round(nrow(MyIrisDF)/5))
(s <- sample(1:nrow(MyIrisDF), n))

## The test set is the sample
IrisTest<- MyIrisDF[s,]
## The trainng set is the not sample
IrisTrain <- MyIrisDF[-s,]
## Have a look...
(head(IrisTest,n=5))
(head(IrisTrain,n=5))

```


```{r}
NBModel <- naive_bayes(IrisTrain$CC ~., data=IrisTrain)
print(NBModel)

plot(NBModel)

## predict
NB_p <- predict(NBModel, IrisTest, type="prob")
(head(round(NB_p)))

## classify/predict
NB_p2 <- predict(NBModel, IrisTest, type="class")
(Pred_TABLE <-table(NB_p2, IrisTest$CC))
## accuracy
(sum(diag(Pred_TABLE)/sum(Pred_TABLE)))

```

