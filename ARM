---
title: "Untitled"
author: "Joel Hoversten"
date: "2024-10-18"
output: html_document
---
---
title: "Untitled"
author: "Joel Hoversten"
date: "2024-10-15"
output: html_document
---

import libraries
```{r}
library(naniar)
library(plyr)
library(viridis)
library(arules)
library(TSP)
library(data.table)
library(ggplot2)
library(Matrix)
library(tcltk)
library(dplyr)
library(devtools)
library(purrr)
library(tidyr)
library(stringr)
```


```{r}
library(arulesViz)

```



import dataset
```{r}
getwd()
setwd("C:/Users/joelh/OneDrive/Desktop/CSCI5622/Project")
```


```{r}
FoodsKumar <- read.transactions("KumarGroceriesAS_Transactions.csv",
                           rm.duplicates = FALSE, 
                           format = "basket",  ##if you use "single" also use cols=c(1,2)
                           sep=",",  ## csv file
                           cols=1) ## The dataset HAS row numbers
inspect(FoodsKumar)
```
###################################
## Example 1: Kumar's Beer Example
##
## Dataset: https://drive.google.com/file/d/1BvU3iXtrwxfjBsRShaDgI-Ldh7Y3XSEn/view?usp=sharing
## KumarGroceriesAS_Transactions
##
## ## Dataset:
## HealthyBasket
## https://drive.google.com/file/d/1qaWSTwjrj7tNB43zLss9KC_ecJKp6W4g/view?usp=sharing
###################################################



```{r}
##### Use apriori to get the RULES
FrulesK = arules::apriori(FoodsKumar, parameter = list(support=.35, 
                                                 confidence=.5, minlen=2))
inspect(FrulesK)
```

```{r}
## Plot of which items are most frequent
itemFrequencyPlot(FoodsKumar, topN=20, type="absolute")
```

```{r}
## Sort rules by a measure such as conf, sup, or lift
SortedRulesK <- sort(FrulesK, by="confidence", decreasing=TRUE)
inspect(SortedRulesK[1:10])
(summary(SortedRulesK))
```

```{r}
## Selecting or targeting specific rules  RHS
BeerRules <- apriori(data=FoodsKumar,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="Beer"),
                     control=list(verbose=FALSE))
BeerRules <- sort(BeerRules, decreasing=TRUE, by="confidence")
inspect(BeerRules[1:4])
```

```{r}
## Selecting rules with LHS specified
BreadRules <- apriori(data=FoodsKumar,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="Bread"),
                       control=list(verbose=FALSE))
BreadRules <- sort(BreadRules, decreasing=TRUE, by="support")
inspect(BreadRules[1:4])
```
```{r}
## Visualize
## tcltk

subrulesK <- head(sort(SortedRulesK, by="lift"),10)
plot(subrulesK)

plot(subrulesK, method="graph", engine="interactive")
```



####################################################
## Example 2: Healthy Food Transaction Data
##
## HERE IS THE DATA - but you should make your own dataset!
## https://drive.google.com/file/d/1qaWSTwjrj7tNB43zLss9KC_ecJKp6W4g/view?usp=sharing
##
##############################################################

```{r}
Foods <- read.transactions("HealthyBasketData.csv",
                             rm.duplicates = FALSE, 
                             format = "basket",  ##if you use "single" also use cols=c(1,2)
                             sep=",",  ## csv file
                             cols=NULL) ## The dataset has no row numbers
inspect(Foods)
```


```{r}
##### Use apriori to get the RULES
Frules = arules::apriori(Foods, parameter = list(support=.35, 
                                          confidence=.5, minlen=2))
inspect(Frules)
```

```{r}
## Plot of which items are most frequent
itemFrequencyPlot(Foods, topN=20, type="absolute")
```

```{r}
## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(Frules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:10])
(summary(SortedRules))
```

```{r}
## Selecting or targeting specific rules  RHS
ChocRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="chocloate"),
                     control=list(verbose=FALSE))
ChocRules <- sort(ChocRules, decreasing=TRUE, by="confidence")
inspect(ChocRules[1:4])
```

```{r}
## Selecting rules with LHS specified
CarrotRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="rhs", lhs="carrot"),
                     control=list(verbose=FALSE))
CarrotRules <- sort(CarrotRules, decreasing=TRUE, by="support")
inspect(CarrotRules[1:4])
```

```{r}
## Visualize
## tcltk

subrules <- head(sort(SortedRules, by="lift"),10)
plot(subrules)
```

```{r}
#plot(subrules, method="graph", engine="interactive")
plot(subrules, method="graph", engine="htmlwidget")
```


```{r}
VideoGameSales <- read.csv("C:/Users/joelh/OneDrive/Desktop/CSCI5622/Data/VideoGameSales.csv")
df<- VideoGameSales[-c(6:1293)]

head(df)
```
```{r}
dfclean<- df[-c(1:3)]

head(dfclean)
```
```{r}
df1<- unite(dfclean, new, X.3:X.4, sep='')
a<- str_split(df1$new, " ")
df2<- data.frame(Reduce(rbind, a))
#df2 %>% replace_with_na(replace = list(x = "RemovedRemoved"))
df2[df2 == "RemovedRemoved"] <- NA
dfFinal<- df2 %>%  drop_na()

```



```{r}
head(dfFinal)
Search_DF<-dfFinal

TransactionFile = "DataforARM.csv"

## Start the file
Trans <- file (TransactionFile)
## Tokenize to words
Tokens<-tokenizers::tokenize_words(Search_DF,stopwords = stopwords::stopwords("en"),
                                   lowercase = TRUE , strip_punct = TRUE , strip_numeric = TRUE ,simplify = TRUE)
## write squished tokens
cat(unlist(str_squish Tokens)), "\n", file= Trans, sep= ",")
close (Trans)
```

```{r}
## Append remaining lists of tokens into file
## Recall - a list of tokens is the set of words from a Tweet
Trans <- file(TransactionFile, open = "a")
for (i in 2:nrow(search_DF)){
  Tokens<-tokenizers::tokenize_words(Search_DF$text[1,2],stopwords = stopwords::stopwords("en"),lowercase = TRUE , strip_punct = TRUE, strip_numeric = TRUE ,simplify = TRUE)
  cat(unlist(str_squish Tokens)), "\n", file= Trans, sep= ",")
}
close (Trans)
```









```{r}
Foods <- read.transactions("HealthyBasketData.csv",
                             rm.duplicates = FALSE, 
                             format = "basket",  ##if you use "single" also use cols=c(1,2)
                             sep=",",  ## csv file
                             cols=NULL) ## The dataset has no row numbers
inspect(Foods)
```




```{r}
arm <- read.transactions("DataforARM.csv",
                             rm.duplicates = FALSE, 
                             format = "basket",  ##if you use "single" also use cols=c(1,2)
                             sep=",",  ## csv file
                             cols=NULL) ## The dataset has no row numbers
```


```{r}
##### Use apriori to get the RULES
VGrules = arules::apriori(arm, parameter = list(support=.05, 
                                          confidence=.05, minlen=2))
inspect(VGrules)
```

```{r}
## Plot of which items are most frequent
itemFrequencyPlot(arm, topN=20, type="absolute")
```

```{r}
## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(VGrules, by="support", decreasing=TRUE)
inspect(SortedRules[1:15])
```
```{r}
## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(VGrules, by="confidence", decreasing=TRUE)
inspect(SortedRules[1:15])
```

```{r}
## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(VGrules, by="lift", decreasing=TRUE)
inspect(SortedRules[1:15])
```




```{r}
## Selecting or targeting specific rules  RHS
ChocRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="lhs", rhs="chocloate"),
                     control=list(verbose=FALSE))
ChocRules <- sort(ChocRules, decreasing=TRUE, by="confidence")
inspect(ChocRules[1:4])
```

```{r}
## Selecting rules with LHS specified
CarrotRules <- apriori(data=Foods,parameter = list(supp=.001, conf=.01, minlen=2),
                     appearance = list(default="rhs", lhs="carrot"),
                     control=list(verbose=FALSE))
CarrotRules <- sort(CarrotRules, decreasing=TRUE, by="support")
inspect(CarrotRules[1:4])
```

```{r}
## Visualize
## tcltk

subrules <- head(sort(SortedRules, by="lift"),10)
plot(subrules)
```

```{r}
#plot(subrules, method="graph", engine="interactive")
plot(subrules, method="graph", engine="htmlwidget")
```
